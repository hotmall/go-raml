{{- define "requests_client_api" -}}
// DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.

package {{.PackageName}}

{{$apiName := .Name}}
import (
	{{ if .NeedImportJSON}}"encoding/json"{{end}}
    {{ with .NewParams}}"strings"{{end}}
    "github.com/tsingtaohot/requests"

    {{ range $k, $v := .Imports -}}
     {{$v}}
    {{end -}}
)

// {{$apiName}} represents an API structure 
type {{$apiName}} struct {
	baseURI string
}

// New{{$apiName}} new an API object
func New{{$apiName}}(host {{range $param := .NewParams}},{{$param}}{{end}} string) {{$apiName}} {
    baseURI := host + "{{.BaseURI}}"
	{{- range $param := .NewParams}}
	baseURI = strings.ReplaceAll(baseURI, {{$param|printf "{%s}"|printf "%q"}}, {{$param}})
	{{- end}}
    return {{$apiName}}{
        baseURI: baseURI,
    }
}

{{ range $k, $v := .Methods }}
{{ range $kf, $vf := $v.FuncComments }}
// {{$v.MethodName}} {{$vf}} {{end}}
func (s {{$apiName}}) {{$v.MethodName}}(reqContext *types.{{$v.MethodName}}Context{{if .ReqBody}}, reqBody {{.ReqBody}}{{end}}) (respHeader map[string]string{{if .RespBody}}, respBody {{.RespBody}}{{end}}, err error) {

    {{$lenParams := len $v.QueryParameters}}
    {{if gt $lenParams 0}}
        p := make(requests.Params)
    {{- end}}
    {{- range $kq, $vq := $v.QueryParameters }}
    {{- if eq $vq.Type "integer"}}
        p["{{$kq}}"] = strconv.Itoa(reqContext.{{$kq|Camelize}})
    {{- else if eq $vq.Type "boolean"}}
        p["{{$kq}}"] = strconv.FormatBool(reqContext.{{$kq|Camelize}})
    {{- else}}
        p["{{$kq}}"] = reqContext.{{$kq|Camelize}}
    {{- end}}
    {{- end }}

    {{$lenHeader := len $v.Headers}}
    {{if gt $lenHeader 0}}
        h := make(requests.Header)
    {{- end}}
    {{- range $kq, $vq := $v.Headers }}
	{{- if eq $vq.Type "integer"}}
        h["{{$kq}}"] = strconv.Itoa(reqContext.{{$kq|printf "%s"|Camelize}})
    {{- else if eq $vq.Type "boolean"}}
        h["{{$kq}}"] = strcony.FormatBool(reqContext.{{$kq|printf "%s"|Camelize}})
	{{- else}}
        h["{{$kq}}"] = reqContext.{{$kq|printf "%s"|Camelize}}
	{{- end}}
	{{- end }}

    {{- range $kq, $vq := $v.URIParameters }}
	{{- if eq $vq.Type "integer"}}
        {{$kq|CamelizeDownFirst}} := strconv.Itoa(reqContext.{{$kq|Camelize}})
	{{- else}}
        {{$kq|CamelizeDownFirst}} := reqContext.{{$kq|Camelize}}
	{{- end}}
	{{- end }}

    {{if ne $v.ReqBody ""}}
    if err = reqBody.Validate(); err != nil {
        return
    }
    jsonBody, err := json.Marshal(reqBody)
    if err != nil {
        return
    }
    {{- end}}

    resp, err := requests.Request("{{$v.Verb}}", s.baseURI {{$v.Route}}{{if gt $lenParams 0}}, p{{end}}{{if gt $lenHeader 0}}, h{{end}}{{if .ReqBody}}, requests.JSON(jsonBody){{end}})
    if err != nil {
        return
    }

    respHeader = make(requests.Header, len(resp.Header))
    for hk, hv := range resp.Header {
        respHeader[hk] = hv
    }

    if resp.StatusCode != {{.FirstSuccessRespStatus}} {
        data := goraml.BasicError{}
        err = goraml.NewAPIError(resp, &data)
        e := err.(goraml.APIError)
        if e.Message != nil {
            err = data
        }
        return
    }

    {{ if $v.HasRespBody }}
    if err = json.Unmarshal(resp.Content(), &respBody); err != nil {
        return
    }
    {{- end}}
    return
}
{{- end -}}
{{- end -}}
