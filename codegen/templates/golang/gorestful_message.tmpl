{{- define "gorestful_message_template" -}}
// DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.

package message

import (
    "sync"
    {{ range $k, $v := .Imports -}}
        {{$v}}
    {{ end -}}
)

var (
    {{.MethodName|DownFirst}}ReqPool sync.Pool
    {{.MethodName|DownFirst}}RespPool sync.Pool
)

type {{.MethodName}}Req struct {
    Context *types.{{.MethodName}}Context
    {{if .ReqBody -}}
    Body {{.ReqBody}}
    {{end}}
}

func New{{.MethodName}}Req() *{{.MethodName}}Req {
    return &{{.MethodName}}Req {
        Context: types.New{{.MethodName}}Context(),
    }
}

func (r *{{.MethodName}}Req) Reset() {
    r.Context.Reset()
    {{if .ReqBody -}}
    r.Body.Reset()
    {{end -}}
}

func Acquire{{.MethodName}}Req() *{{.MethodName}}Req {
    v := {{.MethodName|DownFirst}}ReqPool.Get()
    if v == nil {
        return New{{.MethodName}}Req()
    }
    return v.(*{{.MethodName}}Req)
}

func Release{{.MethodName}}Req(req *{{.MethodName}}Req) {
    req.Reset()
    {{.MethodName|DownFirst}}ReqPool.Put(req)
}

type {{.MethodName}}Resp struct {
    Headers map[string]string
    {{if .RespBody -}}
    Body {{.RespBody}}
    {{end -}}
}

func New{{.MethodName}}Resp() *{{.MethodName}}Resp {
    return &{{.MethodName}}Resp {
        Headers: make(map[string]string),
    }
}

func (r *{{.MethodName}}Resp) Reset() {
    for key := range r.Headers {
        delete(r.Headers, key)
    }
    {{if .RespBody -}}
    r.Body.Reset()
    {{end -}}
}

func Acquire{{.MethodName}}Resp() *{{.MethodName}}Resp {
    v := {{.MethodName|DownFirst}}RespPool.Get()
    if v == nil {
        return New{{.MethodName}}Resp()
    }
    return v.(*{{.MethodName}}Resp)
}

func Release{{.MethodName}}Resp(resp *{{.MethodName}}Resp) {
    resp.Reset()
    {{.MethodName|DownFirst}}RespPool.Put(resp)
}
{{- end -}}
