{{- define "grequests_client_api" -}}
// DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.
package {{.PackageName}}

{{$apiName := .Name}}
import (
	{{ if .NeedImportJSON}}"encoding/json"{{end}}
	"net/http"
    "github.com/levigross/grequests"

    {{ range $k, $v := .Imports -}}
     {{$v}}
    {{end -}}
)

// {{$apiName}} represents an API structure 
type {{$apiName}} struct {
	baseURI string
}

// New{{$apiName}} new an API object
func New{{$apiName}}() {{$apiName}} {
    return {{$apiName}}{
        baseURI: "{{.BaseURI}}",
    }
}

{{ range $k, $v := .Methods }}
{{ range $kf, $vf := $v.FuncComments }}
// {{$v.MethodName}} {{$vf}} {{end}}
func (s {{$apiName}}) {{$v.MethodName}}({{$v.Params}}){{$v.ReturnTypes}} {
		var err error
		{{ range $k, $resp := $v.SuccessRespBodyTypes }}var respBody{{$resp.Code}} {{$resp.Type}}
		{{ end }}

		{{if ne $v.ReqBody ""}}
		if err = body.Validate(); err != nil {
			return {{ range $k, $resp := $v.SuccessRespBodyTypes }}respBody{{$resp.Code}}, {{ end }} nil, err
		}
		{{- end}}

        ro := &grequests.RequestOptions{
            Params: queryParams,
            Headers: headers,
            JSON: {{if ne $v.ReqBody ""}}body{{else}}nil{{end}},
        }

        resp, err := grequests.DoRegularRequest("{{$v.Verb}}", s.baseURI {{$v.Route}}, ro)
		if err != nil {
			return {{ range $k, $resp := $v.SuccessRespBodyTypes }}respBody{{$resp.Code}}, {{ end }} nil, err
		}
		defer resp.Close()
		
		{{ if $v.HasRespBody }}
		switch resp.StatusCode {
		{{- range $k, $resp := $v.SuccessRespBodyTypes }}
			case {{$resp.Code}}:
			err = json.NewDecoder(resp.RawResponse.Body).Decode(&respBody{{$resp.Code}})
		{{- end}}
		{{- range $k, $resp := $v.FailedRespBodyTypes }}
			case {{$resp.Code}}:
			var respBody{{$resp.Code}} {{$resp.Type}}
			err = goraml.NewAPIError(resp.RawResponse, &respBody{{$resp.Code}})
		{{- end}}
			default:
				err = goraml.NewAPIError(resp.RawResponse, nil)
		}
		{{end}}

		return {{ range $k, $resp := $v.SuccessRespBodyTypes }}respBody{{$resp.Code}}, {{ end }} resp.RawResponse, err
}
{{- end -}}

{{- end -}}
