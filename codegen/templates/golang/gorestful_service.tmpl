{{- define "gorestful_service_template" -}}
// DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.
package service

import (
	{{ range $k, $v := .ServiceImporters -}}
		{{$v}}
	{{end}}
)
{{$apiName := .Name}}
// {{.Name}}Service is Service implementation of {{.Endpoint}} root endpoint
type {{.Name}}Service struct {
	delegator delegate.{{.Name}}Delegate
}

// New{{.Name}}Service create {{.Name}}Service object
func New{{.Name}}Service(delegator delegate.{{.Name}}Delegate) *restful.WebService {
	s := &{{.Name}}Service{
		delegator: delegator,
	}

	ws := new(restful.WebService)

	ws.
		Path("{{.APIDef.BaseURI}}").
		Consumes("{{.APIDef.MediaType}}").
		Produces("{{.APIDef.MediaType}}")

	{{ range $k, $v := .Methods }}
	ws.Route(ws.{{$v.Verb}}("{{$v.Endpoint}}").To(s.{{$v.MethodName}}))
	{{- end}}

	return ws
}

{{ range $k, $v := .Methods }}
// {{$v.MethodName}} is the handler for {{$v.Verb}} {{$v.Endpoint}}
{{- range $kf, $vf := $v.FuncComments}}
// {{$vf}}{{end}}
func (s {{$apiName}}Service) {{$v.MethodName}}(req *restful.Request, resp *restful.Response) {
	var reqContext types.{{$v.MethodName}}Context

	{{- range $kq, $vq := $v.QueryParameters }}
	{{$kq}} := req.QueryParameter("{{$kq}}")
	{{- if eq $vq.Type "integer"}}
	if {{$kq}} != "" {
		i, err := strconv.Atoi({{$kq}})
		if err != nil {
			result := make(map[string]string, 1)
			result["error"] = err.Error()
			resp.WriteHeaderAndEntity(400, result)
			return
		}
		reqContext.{{$kq|Title}} = i
	}
	{{- else}}
	reqContext.{{$kq|Title}} = {{$kq}}
	{{- end}}
	{{- end }}

	{{- range $kq, $vq := $v.URIParameters }}
	{{$kq}} := req.PathParameter("{{$kq}}")
	{{- if eq $vq.Type "integer"}}
	if {{$kq}} != "" {
		i, err := strconv.Atoi({{$kq}})
		if err != nil {
			result := make(map[string]string, 1)
			result["error"] = err.Error()
			resp.WriteHeaderAndEntity(400, result)
			return
		}
		reqContext.{{$kq|Title}} = i
	}
	{{- else}}
	reqContext.{{$kq|Title}} = {{$kq}}
	{{- end}}
	{{- end }}

	{{- range $kq, $vq := $v.Headers }}
	{{$kq}} := req.HeaderParameter("{{$kq}}")
	{{- if eq $vq.Type "integer"}}
	if {{$kq}} != "" {
		i, err := strconv.Atoi({{$kq}})
		if err != nil {
			result := make(map[string]string, 1)
			result["error"] = err.Error()
			resp.WriteHeaderAndEntity(400, result)
			return
		}
		reqContext.{{$kq|Title}} = i
	}
	{{- else}}
	reqContext.{{$kq|printf "%s"|Title}} = {{$kq}}
	{{- end}}
	{{- end }}

	// validate context
	if err := reqContext.Validate(); err != nil {
		result := make(map[string]string, 1)
		result["error"] = err.Error()
		resp.WriteHeaderAndEntity(400, result)
		return
    	}
	{{- if .ReqBody }}
	
	var reqBody {{.ReqBody}}
	// decode request
	if err := req.ReadEntity(&reqBody); err != nil {
		result := make(map[string]string, 1)
		result["error"] = err.Error()
		resp.WriteHeaderAndEntity(400, result)
		return
	}
	{{ if .ReqBodyNeedValidation}}
	// validate request
	if err := reqBody.Validate(); err != nil {
		result := make(map[string]string, 1)
		result["error"] = err.Error()
		resp.WriteHeaderAndEntity(400, result)
		return
    	}
	{{- end }}
	{{- end }}

	respHeader{{if .RespBody}}, respBody{{end}}, err := s.delegator.{{$v.MethodName}}(reqContext{{if .ReqBody}}, reqBody{{end}})
	if err != nil {
		result := make(map[string]string, 1)
		result["error"] = err.Error()
		resp.WriteHeaderAndEntity(err.Status, result)
		return
	}
	
	for k, v := range respHeader {
		resp.AddHeader(k, v)
	}

	{{- if .RespBody }}
	if err := resp.WriteEntity(respBody); err != nil {
		result := make(map[string]string, 1)
		result["error"] = err.Error()
		resp.WriteHeaderAndEntity(500, result)
		return
	}
	{{- else}}
	resp.WriteHeader({{.FirstSuccessRespStatus}})
	{{- end }}
}
{{- end -}}
{{- end -}}
