{{- define "gorestful_context_template" -}}
// DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.

package {{.PackageName}}

import (
	"gopkg.in/validator.v2"
    restful "github.com/emicklei/go-restful/v3"
)

// {{.Name}}Context is the context of method {{.Name}}
type {{.Name}}Context struct {
    Request *restful.Request `json:"-"`
    Response *restful.Response `json:"-"`
    Headers map[string]string `json:"headers" validate:"nonnil"`
    {{- range $key, $value := .Fields }}
        {{$value.Name}} {{if eq $value.IsComposition false}} {{$value.Type}} `json:"{{$key}}{{if eq $value.IsOmitted true}},omitempty{{end}}"{{if $value.Validators}} validate:"{{$value.Validators}}"{{end}}` {{end}}
    {{- end -}}
}

// New{{.Name}}Context new an context instance
func New{{.Name}}Context() *{{.Name}}Context {
    return &{{.Name}}Context {
        Headers: make(map[string]string),
        {{- range $key, $value := .Fields }}
            {{- if $value.Default }}
                {{- if eq $value.Type "string" }}
                    {{$value.Name}}: "{{$value.Default}}",
                {{- else}}
                    {{$value.Name}}: {{$value.Default}},
                {{- end}}
            {{- end -}}
        {{- end }}
    }
}

// Reset reset field
func (s *{{.Name}}Context) Reset() {
    s.Request = nil
    s.Response = nil
    for key := range s.Headers {
        delete(s.Headers, key)
    }
    {{- range $key, $value := .Fields }}
        {{- if $value.Default}}
            {{- if eq $value.Type "string" }}
                s.{{$value.Name}} = "{{$value.Default}}"
            {{- else}}
                s.{{$value.Name}} = {{$value.Default}}
            {{- end}}
        {{- else}}
            {{- if eq $value.Type "string" }}
                s.{{$value.Name}} = ""
            {{- else if eq $value.Type "bool" }}
                s.{{$value.Name}} = false
            {{- else if eq $value.Type "int" "int8" "int16" "int32" "int64"}}
                s.{{$value.Name}} = 0
            {{- else if eq $value.Type "float64" }}
                s.{{$value.Name}} = 0.0
            {{- end}}
        {{- end}}
    {{- end }}
}

// Validate check if the data is legal
func (s {{.Name}}Context) Validate() error {
    return validator.Validate(s)
}

{{- end -}}
