{{define "struct_template"}}
// Packaage {{.PackageName}} DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.

package {{.PackageName}}

import (
    {{ range $k, $v := .Imports -}}
        {{ $v }}
    {{ end -}}
)

{{ range $v := .Description }}
// {{$v}} {{end}}
{{ if .OneLineDef -}}
{{ .OneLineDef }}
{{- else -}}
// {{ .Name }} represents a structure
type {{ .Name }} struct {
    {{ range $key, $value := .Fields }}
        {{$value.Name}}  {{if eq $value.IsComposition false}} {{$value.Type}} `json:"{{$key}}{{if eq $value.IsOmitted true}},omitempty{{end}}"{{if $value.Validators}} validate:"{{$value.Validators}}"{{end}}` {{end}}
    {{- end}}
}
{{- end}}

// Reset set {{.Name}} zero value
func (s *{{.Name}}) Reset() {
    {{- range $key, $value := .Fields }}
        {{- if eq $value.Type "string" "json.RawMessage" }}
            s.{{$value.Name}} = ""
        {{- else if eq $value.Type "bool" }}
            s.{{$value.Name}} = false
        {{- else if eq $value.Type "int" "int8" "int16" "int32" "int64"}}
            s.{{$value.Name}} = 0
        {{- else if eq $value.Type "float64"}}
            s.{{$value.Name}} = 0.0
        {{- else if $value.IsArray}}
            s.{{$value.Name}} = s.{{$value.Name}}[:0]
        {{- else if $value.Enum}}
            s.{{$value.Name}}.Reset()
        {{- else if eq $value.Type "Any"}}
            if s.{{$value.Name}} != nil {
                s.{{$value.Name}}.Reset()
            }
        {{- else}}
            {{- if $value.IsOmitted}}
                if s.{{$value.Name}} != nil {
                    s.{{$value.Name}}.Reset()
                }
            {{- else}}
                s.{{$value.Name}}.Reset()
            {{- end}}
        {{- end}}
    {{- end}}
}

{{ if .NotBareInterface}}
// Validate check if the data is legal
func (s {{.Name}}) Validate() error {
    {{/* field level validation */ -}}
    {{- range $k, $v := .Fields }}
    {{- if $v.UniqueItems }}
    m{{$v.Name}} := map[interface{}]struct{}{}
    for _, v := range s.{{$v.Name}} {
        m{{$v.Name}}[v] = struct{}{}
    }
    if len(m{{$v.Name}}) != len(s.{{$v.Name}}) {
        return fmt.Errorf("{{$v.Name}} must be unique")
    }
    {{- end}}
    {{- end }}
    {{- /* type level validation */ -}}
    {{- if .T.MinItems -}}
    if len(s) < {{.T.MinItems}} {
        return fmt.Errorf("len should be >=  {{.T.MinItems}}")
    }
    {{- end}}
    {{- if .T.MaxItems -}}
    if len(s) > {{.T.MaxItems}} {
        return fmt.Errorf("len should be <= {{.T.MaxItems}}")
    }
    {{- end}}
    {{- if .T.UniqueItems }}
	// make sure it is unique
    m := map[interface{}]struct{}{}
	for _, v := range s {
		m[v] = struct{}{}
	}
	if len(m) != len(s) {
		return fmt.Errorf("collection is not unique")
	}
    {{- end }}
    {{- /* call go-validator.Validate if not OneLineDef */ -}}
    {{- if .OneLineDef -}}
    return nil
    {{- else -}}
    return validator.Validate(s)
    {{- end }}
}
{{ end }}
{{end}}
