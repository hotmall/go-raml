// Code generated by go-bindata.
// sources:
// codegen/date/date_only.go
// codegen/date/datetime.go
// codegen/date/datetime_only.go
// codegen/date/datetime_rfc2616.go
// codegen/date/time_only.go
// DO NOT EDIT!

package date

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _date_onlyGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xd1\x6b\xdb\x30\x10\xc6\x9f\x2d\xd0\xff\x70\xf3\x93\x94\xc6\x69\xd6\xc0\x60\x03\x3f\x8c\x8d\x3c\x8c\x75\x1d\x6d\xf6\x34\x06\x55\xe2\x73\x2b\x6a\x49\xe6\x24\x17\xbc\xb1\xff\xbd\x48\x76\xe2\x84\x16\xe2\x17\xc3\xdd\x7d\x77\xbf\xef\xb3\x5b\xb5\x7b\x52\x0f\x08\x95\x0a\xc8\x19\x67\xda\xb4\x8e\x02\x08\xce\xb2\x3c\x68\x83\x39\x67\x32\xd6\x9f\x15\xa5\x62\x9c\xbb\xb1\x4d\xbf\x36\x01\x86\xa7\x84\xfc\x6a\xb9\xfc\x50\x2c\xdf\x17\xcb\xab\xfc\x74\x64\xa3\x77\x4f\x58\x41\x09\xf7\xf9\x3d\x5c\xc0\xb1\xf8\x22\xd6\xc6\xe5\x97\x97\xf0\x75\x6c\x01\x61\x4b\xe8\xd1\x06\xb8\xfd\x7c\xfd\x3d\x49\x0a\x17\x1b\xa1\x6f\x31\x8d\x6e\x1e\x11\xf2\xba\x6b\x9a\x22\x36\x73\xb0\x2e\xa8\xa0\x9d\x05\x57\xc3\xed\xfa\xcb\x6a\xb5\xfa\x38\x07\xab\x0c\x36\x3d\xf4\x7d\xdf\x17\xc6\x14\x55\xb5\x18\xce\x38\xf4\x51\x00\xbe\x6b\x93\xd1\xe8\x11\x1c\x0d\xef\xbf\xce\x62\xe1\xea\xda\x63\x38\x6c\x5d\x70\x16\x2f\x4f\x80\x71\x72\xb1\xd1\x06\x47\xf2\x6b\x45\xfe\x51\x35\xdf\xee\x6e\x7e\x80\x7b\x46\x22\x5d\x21\x98\xa9\xc8\x59\xdd\xd9\x1d\x88\xca\xc1\x6c\xbf\x44\x1e\xab\x84\x04\xf1\xfb\xcf\xb6\x0f\x38\x07\x24\x72\x24\xe1\x1f\x67\x19\x61\xe8\xc8\xc2\xd0\x11\x87\xab\x62\x56\x39\xb9\x58\x3b\x32\x2a\x88\x57\x51\x4b\x39\x07\xab\x1b\xce\xfe\x8f\x74\xbf\xac\x79\x8b\xaf\xb3\x67\x09\x4f\x94\x62\x3b\x82\xc8\x01\x31\x11\x06\x9f\x80\xe1\x53\x39\x84\xf2\x53\x91\xc7\xd7\x4c\x73\xf0\x81\xb4\x7d\x10\x5b\x29\x39\xcb\x74\x9d\x44\xef\xca\x08\x9a\xf6\xec\xad\x22\x11\x67\x59\x22\xcf\x66\x95\x83\xf2\x10\xba\x08\x5e\x4e\x91\x9c\x18\xbc\x4b\xbb\x61\x68\xf9\xf1\xd4\xf4\x17\xa5\x6f\xf8\xb6\xc1\x41\x29\xe4\x5e\x73\x14\xfa\xd9\xb4\x65\x02\x78\x09\x00\x00\xff\xff\x21\x55\x42\x3f\x3d\x03\x00\x00")

func date_onlyGoBytes() ([]byte, error) {
	return bindataRead(
		_date_onlyGo,
		"date_only.go",
	)
}

func date_onlyGo() (*asset, error) {
	bytes, err := date_onlyGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "date_only.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _datetimeGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x4f\x6b\x1b\x31\x10\xc5\xcf\x2b\xd0\x77\x98\xee\xa5\x92\x63\x3b\x9b\xb8\x29\xc4\xb0\xa7\x16\x1f\x0a\xfd\x43\xe3\x5e\x5a\x0a\x91\xad\xd9\x54\x24\xd2\x2e\xa3\x71\x20\x94\x7e\xf7\x22\xed\x6e\x6c\x93\x80\x75\x12\x33\xf3\xde\xfc\xe6\x75\x66\x7b\x6f\xee\x10\xac\x61\x94\x42\x0a\xe7\xbb\x96\x18\x94\x14\x45\xc9\xce\x63\x29\x85\x4e\xf5\x47\x43\xb9\x98\xe6\xd6\xce\xe3\xca\x33\xf4\xaf\x86\xf2\xb2\xaa\xde\xcf\xaa\x8b\x59\x75\xb9\xbe\xb8\x5a\x56\xef\x96\xd5\xd5\xfc\x7a\x7c\x3f\xcb\x63\xd9\xda\x6d\xef\xd1\x42\x0d\xb7\xe5\x2d\x9c\xc1\xa1\xe1\x59\xaa\x0d\x0b\xcf\xcf\xe1\xe3\xd0\x02\x17\x21\xb1\x44\x36\xbe\x03\x17\xa0\x4c\xa2\x59\xc6\x83\xa6\x25\x6f\x18\x2c\x36\x2e\xa0\x4d\xdd\xef\xab\x0f\x8b\xc5\xe2\x5a\x0a\x7e\xea\x70\x6f\x92\xc6\xe7\xe9\x37\xb8\x7f\x36\x14\xff\x98\x87\x4f\x37\x5f\xbf\x40\xfb\x88\x44\xce\x22\xf8\x7d\x51\x8a\x66\x17\xb6\xa0\x2c\xc3\x64\x34\xd1\x87\x2a\xa5\x41\xfd\xfa\xbd\x79\x62\x9c\x02\x12\xb5\xa4\xe1\xaf\x14\x05\x21\xef\x28\x40\xdf\x51\xcf\x5b\xd5\xc4\xb2\x9e\xaf\x32\xad\x7a\x11\x87\xd6\x53\x08\xee\x41\x8a\x7f\x03\xdd\x8f\xe0\x5f\xe3\xdb\x85\x93\x84\x47\x4a\xb5\x19\x40\x74\x8f\x98\x09\x39\x66\x60\x58\xd6\x7d\x28\xdf\x0c\x45\x7c\xc9\x34\x85\xc8\xe4\xc2\x9d\xda\x68\x2d\x45\xe1\x9a\x2c\x7a\x53\x27\xd0\xec\x33\x9e\x8a\x44\x52\x14\x99\xbc\x98\x58\x86\xfa\x39\x74\xc5\x51\xef\x23\x39\x3a\xf0\x26\x7b\x43\xdf\x8a\xe0\xf8\x6d\x1c\xf6\x01\x61\x47\x18\x31\xb0\x61\xd7\x86\xd7\xaf\xec\xe5\x4a\x8f\x9a\x83\xe4\x4f\x46\xae\x33\xc5\xff\x00\x00\x00\xff\xff\xef\xe5\x44\x71\xfa\x02\x00\x00")

func datetimeGoBytes() ([]byte, error) {
	return bindataRead(
		_datetimeGo,
		"datetime.go",
	)
}

func datetimeGo() (*asset, error) {
	bytes, err := datetimeGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datetime.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _datetime_onlyGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xd1\x6b\xdb\x30\x10\xc6\x9f\x2d\xd0\xff\x70\xf3\x93\xd4\xc6\xae\x5b\xd6\x41\x0d\x7e\x18\x2b\x7d\x18\xeb\x3a\x56\xef\xa9\x14\xaa\xc4\xe7\x46\x34\x92\x8c\x74\xe9\xf0\xc6\xfe\xf7\x61\xd9\x6d\x92\x2d\x94\xe4\x29\xdc\xa7\xef\xee\xf7\xdd\xb9\x53\x8b\x27\xf5\x88\xd0\x28\x42\xce\x38\xd3\xa6\x73\x9e\x40\x70\x96\xa4\xa4\x0d\xa6\x9c\xc9\xa1\xfe\xac\x7c\x2c\x0e\xef\x86\xfa\x8d\x5d\xf5\x57\x86\x60\xfc\x55\x90\x9e\x15\xc5\x87\xac\x38\xcd\x8a\xb3\xfa\xf4\xbc\x2c\xde\x97\xc5\x79\x7e\x71\x91\xfe\x6f\xa9\xf5\xe2\x09\x1b\xa8\xe0\x21\x7d\x80\x63\xf8\xb7\xe1\xf1\x50\x9f\x86\x9e\x9c\xc0\xe5\x96\x0c\x1e\x3b\x8f\x01\x2d\xc1\xf7\x8f\xd7\x5f\x5e\xad\x99\x1b\x44\xea\x3b\x8c\x96\x4f\xce\xcc\xb5\xc5\x26\xea\xa3\xa6\x6c\x03\x9b\x97\x3f\x35\x2d\x41\x41\xc0\x4e\x79\x45\xce\x83\x6b\x21\xad\xd3\x59\x74\x5b\x65\x70\xd5\x43\xdf\xf7\x7d\x66\x4c\xd6\x34\xf5\x72\x59\x1a\x53\x86\x70\x97\xb7\x6d\x9e\xe7\xf7\x39\x5c\x3a\x0c\x60\x1d\x41\x58\x77\x71\x5d\x2a\x76\x87\x5f\xce\x22\xb8\xb6\x0d\x48\x39\x67\x03\xd0\x2e\xff\xf0\x27\xaf\xb5\xc1\x29\xdc\xb5\xf2\x61\xa9\x56\x9f\x6f\x6f\xbe\x82\x7b\x46\xef\x75\x83\x60\x36\x45\xce\xda\xb5\x5d\x80\x68\xc8\xc1\xd1\x76\x27\xb9\x6d\x15\x12\xc4\xdd\xfd\xbc\x27\x9c\x01\x7a\xef\xbc\x84\xdf\x9c\x25\x1e\x69\xed\x2d\x8c\x8a\x78\x1d\x2d\x8e\x1a\x72\x32\xbf\x72\xde\x28\x12\x7b\x6f\x23\xe5\x0c\xac\x5e\x71\xf6\x67\xe2\xfc\x61\xcd\x3e\xd2\xb5\x3d\x8c\x75\xc7\x2e\xe6\x13\x92\x1c\x61\x23\x2b\x85\x88\x0e\x65\x35\xee\xe8\x9b\xf2\x01\xf7\xc3\xcd\x20\x90\xd7\xf6\x51\xcc\xa5\xe4\x2c\xd1\x6d\x34\xbe\xab\x06\xe2\xd8\xeb\x25\x38\x7a\xcf\x59\x12\x23\x24\x43\x66\xa8\x76\x8e\x21\x28\xc8\xcd\x96\x76\xe2\xde\xc6\x01\x30\x4a\x61\x9a\xb7\xf9\xf8\x14\x69\x67\xdf\x88\x3b\xda\x85\x7c\x31\x6e\x1d\xe3\xb0\x2b\xc8\x88\xf2\x37\x00\x00\xff\xff\x9f\x5c\x1a\x9d\x9a\x03\x00\x00")

func datetime_onlyGoBytes() ([]byte, error) {
	return bindataRead(
		_datetime_onlyGo,
		"datetime_only.go",
	)
}

func datetime_onlyGo() (*asset, error) {
	bytes, err := datetime_onlyGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datetime_only.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _datetime_rfc2616Go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x6b\xdb\x40\x10\x85\xcf\x5a\xd8\xff\xf0\xaa\x4b\x77\x1d\x93\x28\xa6\xf1\xc1\xa0\x53\x8b\x0f\x01\xb7\xa5\x76\x4f\xa5\x90\xb5\x35\x4e\x97\x44\x2b\x31\x3b\x0e\x84\xd2\xff\x5e\xb4\x92\x9b\x38\x75\x82\xf7\xf8\x66\xdf\x9b\x6f\x66\x5a\xb7\xb9\x73\xb7\x84\xca\x09\x69\xa5\x95\xaf\xdb\x86\x05\x46\xab\x2c\x17\x5f\x53\xae\x95\xed\xf4\x07\xc7\x49\xec\xfe\xad\x7c\x4d\xdf\xe6\x1f\x27\xd3\xcb\xe9\xbc\x16\xf4\xaf\x44\xbe\x68\xc2\x18\xc5\x04\xd7\x2e\x60\x52\x14\x53\x5c\x5e\xcd\x8a\x0f\xb3\xe2\x0a\x8b\xe5\x2a\x3f\x6a\x5e\xf9\xcd\x1d\x55\x28\x71\x93\xdf\xe0\x0c\x47\xd2\xcf\xba\xd2\x00\x71\x71\x81\x4f\x87\x3f\xe0\x23\x3a\xcc\x28\xae\x6e\xe1\x03\xf6\xfa\xb6\xe1\xda\x89\x56\xf2\xd8\xd2\x7f\xa6\xce\x71\xde\x09\x43\xe8\xc2\x71\xfc\xe5\xee\xaf\x97\x5f\x3e\xa3\x79\x20\x66\x5f\x11\xea\x27\x51\xab\xed\x2e\x6c\x60\x2a\xc1\xe8\x45\x96\x7d\x6e\x36\x16\xe6\xc7\xcf\xf5\xa3\xd0\x18\xc4\xdc\xb0\xc5\x6f\xad\x32\x26\xd9\x71\x40\x5f\x31\xff\x9a\x9b\x51\x25\xf6\x7c\x9e\x40\xcd\x6b\xab\xb1\x76\x8c\xe0\xef\xb5\xfa\x33\xb0\x7e\x0f\xf5\x31\xda\x5d\x38\x95\xf7\x20\xc0\xac\x07\x2c\xdb\x03\x27\x5e\x89\x09\x1f\xb3\xb2\xdf\xd4\x57\xc7\x91\x5e\x25\x1c\x23\x0a\xfb\x70\x6b\xd6\xd6\x6a\x95\xf9\x6d\xf2\xbe\x2b\x3b\xec\x14\xb7\x9f\x9f\x98\xb5\xca\xd2\x1c\xd9\xa8\x12\x94\x2f\xef\x62\x24\xda\xa7\x75\x1d\x4c\xbd\x4c\x2d\xd0\x97\x22\xbc\xbc\x8f\x43\x5b\x30\xb5\x4c\x91\x82\x38\xf1\x4d\x78\x73\xf4\x3e\xc5\xd8\xbd\xf5\xd9\x71\x4e\xbd\x8a\x4d\x4c\x7f\x03\x00\x00\xff\xff\xf6\x69\x79\xd3\x36\x03\x00\x00")

func datetime_rfc2616GoBytes() ([]byte, error) {
	return bindataRead(
		_datetime_rfc2616Go,
		"datetime_rfc2616.go",
	)
}

func datetime_rfc2616Go() (*asset, error) {
	bytes, err := datetime_rfc2616GoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datetime_rfc2616.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _time_onlyGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x4f\x6b\xdb\x40\x10\xc5\xcf\x5a\xd8\xef\x30\xd5\x69\xd7\xb1\x95\x14\x37\x07\x0b\x74\x28\x2d\x3e\x94\xa6\x29\x49\x7a\x0a\x81\xac\xed\x51\x2c\xa2\xdd\x15\xb3\xe3\x80\x5b\xfa\xdd\xc3\xae\xe4\x7f\x24\x10\xdd\x34\x33\xef\xcd\x6f\x9e\xd4\x99\xe5\xb3\x79\x42\x58\x19\x46\x29\xa4\x68\x6c\xe7\x89\x41\x49\x91\xe5\xdc\x58\xcc\xa5\xd0\xb1\xfe\x62\x28\x15\x63\xed\xda\xb5\xdb\xb9\x65\xe8\x9f\x0a\xf2\xcf\x97\xe5\xc5\x97\xf2\xe2\xb2\x98\xcd\xf2\xd3\x99\xbb\x66\xf9\x8c\x2b\xa8\xe0\x31\x7f\x84\x33\x38\x56\x9f\xc5\xda\xe0\x7e\x7e\x0e\x77\x43\x0b\x08\x3b\xc2\x80\x8e\xe1\xe6\xeb\xd5\xcf\x24\x99\xf8\xd8\xe0\x6d\x87\x45\x3f\xbb\x46\xc8\x3b\x43\xdc\x98\x76\x92\x28\xc1\x79\x36\xdc\x78\x07\xbe\x86\x9b\xf9\xb7\xe9\x74\x3a\x1b\x83\x33\x16\xdb\x2d\xac\xd7\xa5\xb5\x65\x08\xf7\x45\x5d\x17\x45\xf1\xd0\x9b\x7c\xf7\x18\xa2\x0c\xc2\xa6\x4b\x37\xc7\x08\xc0\x53\xda\x08\x7f\xbd\xc3\x89\xaf\xeb\x80\xbc\xf7\x2e\xa4\x88\x0c\x07\xd4\x38\x59\xc4\xb7\xe1\x86\x2b\x43\x61\x6d\xda\x1f\xb7\xd7\xbf\xc0\xbf\x20\x51\xb3\x42\xb0\x87\xa2\x14\xf5\xc6\x2d\x41\xb1\x87\xd1\xce\x44\x1f\xab\x94\x06\x75\xff\xb0\xd8\x32\x8e\x01\x89\x3c\x69\xf8\x27\x45\x46\xc8\x1b\x72\xd0\x77\xd4\x7e\xab\x1a\xb1\xd7\xc5\xdc\x93\x35\xac\xde\x84\xae\xf5\x18\x5c\xd3\x4a\xf1\x7f\xa0\xfb\xe3\xec\x7b\x7c\x1b\xf7\x21\xe1\x89\x52\x2d\x06\x10\xdd\x23\x26\x42\x0e\x09\x18\xca\xaa\x0f\xe5\xb7\xa1\x80\x6f\x99\xc6\x10\x98\x1a\xf7\xa4\x16\x5a\x4b\x91\x35\x75\x12\x7d\xaa\x22\x68\xf2\xd9\x9d\x8a\x44\x52\x64\x89\x3c\x1b\xb1\x87\x6a\x1f\xba\xe2\xa0\x0f\x91\x9c\x1c\x78\x9b\xbc\xa1\x6f\x85\x61\xd5\xe1\x7f\x4a\xdf\xf0\xfd\x03\x7b\xa5\xd2\x3b\xcd\x51\xe8\x1f\xa6\xad\x13\xc0\x6b\x00\x00\x00\xff\xff\x77\xf9\x1e\x96\x48\x03\x00\x00")

func time_onlyGoBytes() ([]byte, error) {
	return bindataRead(
		_time_onlyGo,
		"time_only.go",
	)
}

func time_onlyGo() (*asset, error) {
	bytes, err := time_onlyGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "time_only.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"date_only.go": date_onlyGo,
	"datetime.go": datetimeGo,
	"datetime_only.go": datetime_onlyGo,
	"datetime_rfc2616.go": datetime_rfc2616Go,
	"time_only.go": time_onlyGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"date_only.go": &bintree{date_onlyGo, map[string]*bintree{}},
	"datetime.go": &bintree{datetimeGo, map[string]*bintree{}},
	"datetime_only.go": &bintree{datetime_onlyGo, map[string]*bintree{}},
	"datetime_rfc2616.go": &bintree{datetime_rfc2616Go, map[string]*bintree{}},
	"time_only.go": &bintree{time_onlyGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

