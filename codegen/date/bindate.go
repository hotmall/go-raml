// Code generated by go-bindata.
// sources:
// codegen/date/date_only.go
// codegen/date/datetime.go
// codegen/date/datetime_only.go
// codegen/date/datetime_rfc2616.go
// codegen/date/time_only.go
// DO NOT EDIT!

package date

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _date_onlyGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x41\x6b\xdb\x40\x10\x85\xcf\x9a\x5f\x31\xd5\x69\x37\xb1\x1c\x35\x86\x42\x0b\x3a\x94\x16\x1f\x4a\xd3\x94\xc4\x3d\x95\x42\xd6\xd6\x28\x59\xa2\xdd\x15\xb3\xab\x80\x5a\xfc\xdf\xcb\xae\x1c\x29\xc1\x86\xe8\x22\x98\x79\x6f\xe6\x9b\x27\x75\x6a\xf7\xa8\xee\x09\x6b\x15\x08\x40\x9b\xce\x71\x40\x01\x59\x1e\xb4\xa1\x1c\x24\xc0\x93\xe2\x58\x88\x82\x6b\xdb\x0e\x6b\x13\x70\x7c\x2a\xcc\x2f\xcb\xf2\x43\x51\xbe\x2f\xca\xcb\xfc\x95\x62\xa3\x77\x8f\x54\x63\x85\x77\xf9\x1d\x9e\xe3\x4b\xef\x79\xac\xc5\xb9\x17\x17\xf8\xf5\x50\x47\xa6\x8e\xc9\x93\x0d\x78\xf3\xf9\xea\x7b\xd2\x17\x2e\x36\xc2\xd0\x51\x54\x6e\x1e\x08\xf3\xa6\x6f\xdb\x22\xf6\x72\xb4\x2e\xa8\xa0\x9d\x45\xd7\xe0\xcd\xfa\xcb\x6a\xb5\xfa\xb8\x40\xab\x0c\xb5\x03\x0e\xc3\x30\x14\xc6\x14\x75\xbd\x4c\x4b\x1c\xf9\xa8\x47\xdf\x77\xe9\xba\x78\x19\x3a\x1e\xdf\x7f\x9d\xa5\xc2\x35\x8d\xa7\x30\x0d\x5d\x42\x5c\x3b\xd3\x45\xe1\x72\xa3\x0d\x25\xe8\x2b\xc5\xfe\x41\xb5\xdf\x6e\xaf\x7f\xa0\x7b\x22\x66\x5d\x13\x9a\xb9\x08\x4d\x6f\x77\x28\x6a\x37\x0d\x90\x2f\x3d\x42\xa2\xf8\xfd\x67\x3b\x04\x5a\x20\x31\x3b\x96\xf8\x0f\x32\xa6\xd0\xb3\xc5\xb1\x21\xa6\x85\xa2\x76\x72\xb9\x76\x6c\x54\x10\x47\xf1\x4a\xb9\x40\xab\x5b\xd8\x27\xac\x5f\xd6\x9c\x02\xeb\xed\x49\xb4\xb3\x99\xed\x95\x51\x6c\x0f\x0c\x72\x84\x8b\x6c\xc1\x27\x52\xfc\x54\x8d\x49\xfc\x54\xec\xe9\x18\x67\x81\x3e\xb0\xb6\xf7\x62\x2b\x25\x64\xba\x49\x9e\x77\x55\x44\x8c\x53\x9e\x4f\x24\x66\xc8\xf6\x00\xd9\x59\xed\xb0\x9a\x32\x12\xc1\xcb\x29\x86\xf9\xaa\xdb\x34\x12\xc7\xba\x3f\x6c\x98\x7f\x97\xf4\xb9\x4e\x05\x3e\xfa\x84\x7c\x76\xcc\x11\xbf\x95\xad\x84\x3d\xfc\x0f\x00\x00\xff\xff\x42\x96\xe0\x71\x15\x03\x00\x00")

func date_onlyGoBytes() ([]byte, error) {
	return bindataRead(
		_date_onlyGo,
		"date_only.go",
	)
}

func date_onlyGo() (*asset, error) {
	bytes, err := date_onlyGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "date_only.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _datetimeGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x4f\x6b\x1b\x31\x10\xc5\xcf\x3b\x9f\x62\xba\x97\x4a\x89\xed\x6c\xe2\xa6\x10\xc3\x9e\x5a\x7c\x28\xf4\x0f\x8d\x7b\x69\x29\x44\xb6\x66\x53\x91\x48\xbb\x8c\xc6\x06\x53\xfc\xdd\x8b\x76\xed\x5d\x1b\x1b\xaa\x93\x78\xd2\x7b\xf3\x9b\xd7\x98\xd5\x8b\x79\x26\xb4\x46\x08\xc0\xf9\xa6\x66\x41\x05\x59\x2e\xce\x53\x0e\x1a\x60\x63\x38\x09\xe9\xc3\xc2\x79\x9a\x7b\xc1\xee\x94\x98\xdf\x15\xc5\xfb\x71\x71\x3b\x2e\xee\x16\xb7\xf7\xb3\xe2\xdd\xac\xb8\x9f\x3c\x1c\xce\xcf\xfc\xc4\xb5\x70\xab\x17\xb2\x58\xe2\x53\xfe\x84\xd7\x78\x9c\x77\x9d\xb4\x34\xeb\xe6\x06\x3f\xee\x75\x74\x11\x13\x43\x14\xe3\x1b\x74\x01\xf3\xe4\x18\xb7\x58\x58\xd5\xec\x8d\xa0\xa5\xca\x05\xb2\xe9\xf5\xfb\xfc\xc3\x74\x3a\x7d\x00\xd9\x36\x34\x64\xa4\xdf\x93\x74\x6b\xa3\x3f\x1b\x8e\x7f\xcc\xeb\xa7\xc7\xaf\x5f\xb0\xde\x10\xb3\xb3\x84\x7e\x10\xa1\x5a\x87\x15\x2a\x2b\x7d\x80\x3e\xf6\x28\x8d\xea\xd7\xef\xe5\x56\x68\x84\xc4\x5c\xb3\xc6\xbf\x90\x31\xc9\x9a\x03\x76\x0f\xaa\x1f\xa8\xac\xe8\xc9\xbc\xc5\x54\x67\x25\x68\x3d\xc2\xe0\x5e\x61\xd7\x62\xfd\x08\xfe\x12\xd8\x3a\x5c\x44\xbb\x1a\xd8\x4e\x8c\x6a\xb9\x67\xd0\x1d\x5c\x62\x93\xd8\x92\xe2\xac\xec\x9a\xf8\x66\x38\xd2\x39\xce\x08\xa3\xb0\x0b\xcf\x6a\xa9\x35\x64\xae\x6a\x3d\x6f\xca\x84\x98\x52\x0e\x2b\x12\x33\x64\x3b\x80\xec\xca\x0a\x96\x7d\x47\x4a\xa2\xee\x6b\x18\xb6\x7a\x6c\x23\xb1\xd3\x23\x3a\x79\x1b\xf7\x63\x90\xa9\x61\x8a\x14\xc4\x88\xab\xc3\xa5\xd6\x3b\xb3\xd2\x07\xc7\xd0\xf3\xff\x0a\xd6\xb0\x83\x7f\x01\x00\x00\xff\xff\xaa\x62\xaf\x5a\xd4\x02\x00\x00")

func datetimeGoBytes() ([]byte, error) {
	return bindataRead(
		_datetimeGo,
		"datetime.go",
	)
}

func datetimeGo() (*asset, error) {
	bytes, err := datetimeGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datetime.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _datetime_onlyGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x4f\xdc\x3e\x10\xc5\xcf\xf1\xa7\x98\x7f\x4e\x36\x6c\x42\x40\x7f\x2a\x11\x29\x87\xaa\x88\x43\x55\x4a\x55\xd2\x13\x42\xc2\xbb\x99\xb0\x16\x6b\x3b\x1a\xcf\x52\xa5\xd5\x7e\xf7\xca\x09\x6c\x48\xbb\x95\x9a\x53\x34\xe3\xf7\xe6\x37\xcf\xee\xf4\xea\x49\x3f\x22\x34\x9a\x51\x08\x63\x3b\x4f\x0c\x52\x24\x29\x1b\x8b\xa9\x50\x42\x3c\x6b\x8a\x85\x78\x20\xd6\x6e\xdc\xa6\xbf\xb2\x0c\xe3\x57\x41\x7a\x56\x14\xef\xb2\xe2\x34\x2b\xce\xea\xd3\xf3\xb2\xf8\xbf\x2c\xce\xf3\x8b\x8b\xf4\x0f\x45\x6d\x56\x4f\xd8\x40\x05\x0f\xe9\x03\x1c\xc3\xef\x7e\xc7\xb1\x1e\xe7\x9d\x9c\xc0\xe5\x9b\x1e\x10\x76\x84\x01\x1d\xc3\xd7\xf7\xd7\x9f\xf6\xba\xcc\xc7\x26\xf7\x1d\x46\xc5\x07\x6f\x97\xc6\x61\x33\xb4\xc7\x96\x76\x0d\x4c\x07\xbf\x1b\x5e\x83\x86\x80\x9d\x26\xcd\x9e\xc0\xb7\x90\xd6\xe9\x22\x8a\x9d\xb6\xb8\xe9\xa1\xef\xfb\x3e\xb3\x36\x6b\x9a\x7a\xbd\x2e\xad\x2d\x43\xb8\xcb\xdb\x36\xcf\xf3\xfb\x1c\x2e\x3d\x06\x70\x9e\x21\x6c\xbb\x21\x23\x3d\x98\xc3\x0f\xef\x10\x7c\xdb\x06\xe4\x5c\x44\x9a\x39\x7c\xfc\xc9\x6b\x63\x71\xd8\xeb\x5a\x53\x58\xeb\xcd\xc7\xdb\x9b\xcf\xe0\x9f\x91\xc8\x34\x08\x76\x2a\x8a\x76\xeb\x56\x20\x1b\xf6\x33\x17\xf5\x56\x28\x15\xc8\xbb\xfb\x65\xcf\xb8\x00\x24\xf2\xa4\xe0\xa7\x48\x08\x79\x4b\x0e\xc6\x86\xdc\x4f\x8d\x56\x2a\xbf\xf2\x64\x35\xcb\x83\xf7\xa1\xd4\x02\x9c\xd9\x88\xdd\x00\xf8\xcd\xd9\x43\x88\x5b\x77\x18\xf2\x68\x4e\x39\x53\xcb\xe5\x0b\x8d\x1a\x31\x23\x25\x87\x81\x19\xca\x6a\x0c\xe6\x8b\xa6\x80\x87\xb9\x16\x10\x98\x8c\x7b\x94\x4b\xa5\x44\x62\xda\x41\xf7\x5f\x15\x59\xa3\xd3\xeb\xc2\x48\x24\x92\x9d\x10\xc9\x51\xe4\xa9\x66\xb1\x49\x0e\x6a\x9f\xcc\xb4\xe3\xed\xe0\x0b\x63\x3d\xbc\x8c\x99\x5e\x99\x66\xe3\xdd\x5f\x2f\x62\x14\x4b\xf5\x2a\x9b\xa2\xff\xa7\xcc\x95\xd8\x89\x5f\x01\x00\x00\xff\xff\x2b\x77\x34\x12\x72\x03\x00\x00")

func datetime_onlyGoBytes() ([]byte, error) {
	return bindataRead(
		_datetime_onlyGo,
		"datetime_only.go",
	)
}

func datetime_onlyGo() (*asset, error) {
	bytes, err := datetime_onlyGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datetime_only.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _datetime_rfc2616Go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x41\x4f\xdb\x40\x10\x85\xcf\x9e\x5f\xf1\xea\x4b\x77\x21\x02\x13\x95\x1c\x22\xf9\xd4\x2a\x07\xa4\xb4\x55\x93\x9e\xaa\x4a\x6c\xe2\x09\x5d\xc1\xae\xad\xd9\x09\x12\xaa\xf2\xdf\xab\xb5\x09\x29\x10\xaa\xfa\xf8\xc6\xef\xcd\xb7\x6f\x3a\xb7\xbe\x75\x37\x8c\xc6\x29\x13\xf9\xd0\xb5\xa2\x30\x54\x94\xea\x03\x97\x64\x89\xee\x9d\x64\x21\xff\xb0\xf4\x81\xbf\xcd\x3e\x8e\x27\x17\x93\x59\x50\x0c\x5f\x8d\x72\xde\xc6\x11\xaa\x31\xae\x5c\xc4\xb8\xaa\x26\xb8\xb8\x9c\x56\x1f\xa6\xd5\x25\xe6\x8b\x65\x79\xcc\xbb\xf4\xeb\x5b\x6e\x50\xe3\xba\xbc\xc6\x29\x8e\x84\x9f\xe6\x51\xde\x7f\x7e\x8e\x4f\xcf\xc7\xf0\x09\x19\x2f\xa9\x0b\x1d\x7c\xc4\x5e\xdf\xb4\x12\x9c\x92\x3e\x74\xfc\xca\x93\x0d\x67\x59\xe8\x13\xe7\x4e\xd2\x2f\x77\x77\xb5\xf8\xf2\x19\xed\x3d\x8b\xf8\x86\x11\x0e\x22\x6d\xb6\x71\x0d\xd3\xe8\xcb\x1c\xfb\xb7\xd5\x58\x98\x1f\x3f\x57\x0f\xca\x23\xb0\x48\x2b\x16\xbf\xa9\x10\xd6\xad\x44\x0c\x03\xf3\xb4\xd7\x34\x6a\xcf\x66\x3d\xa1\x79\xab\x10\x6b\x47\x88\xfe\x8e\x76\x3d\xe4\xf7\x18\x8e\x61\x6e\xe3\x51\xd0\x93\x57\xa4\xcf\xfc\x66\xf5\x48\x64\x07\xd4\x4c\xaa\xa9\xe7\xc6\xb4\x1e\xea\xf9\xea\x24\xf1\x9b\x70\x23\x24\x15\x1f\x6f\xcc\xca\x5a\x2a\xfc\xa6\xb7\xbe\xab\x33\x70\x0e\xdb\xbf\x9b\x45\xa8\xd8\x11\x15\x27\x8d\xa2\x7e\xd9\x9f\xd1\x64\x9f\x2a\x3a\x3c\x75\xd1\x27\x63\xd0\x13\xbc\xbe\x4f\x8f\xdb\x20\xdc\x09\x27\x8e\xea\xd4\xb7\xf1\x1f\x87\x19\x32\x8c\xdd\x1b\x0f\xa7\xf8\xcf\x1b\x58\xda\xd1\x9f\x00\x00\x00\xff\xff\x3a\xde\x91\x03\x10\x03\x00\x00")

func datetime_rfc2616GoBytes() ([]byte, error) {
	return bindataRead(
		_datetime_rfc2616Go,
		"datetime_rfc2616.go",
	)
}

func datetime_rfc2616Go() (*asset, error) {
	bytes, err := datetime_rfc2616GoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "datetime_rfc2616.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _time_onlyGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x41\x4f\x1b\x31\x10\x85\xcf\xeb\x5f\x31\xdd\x93\x0d\x89\xa1\x4a\x39\x64\xa5\x3d\x54\xad\x72\xa8\x4a\xa9\x80\x9e\x10\x12\x4e\x32\x4b\x2c\xd6\xf6\x6a\x3c\x41\x4a\xab\xfc\xf7\xca\xde\xb0\x0b\x22\x12\x7b\xf3\x78\xde\x9b\x6f\xde\xba\x33\xab\x27\xf3\x88\xb0\x36\x8c\x42\x58\xd7\x05\x62\x90\xa2\x28\xd9\x3a\x2c\x85\x12\xe2\xd9\x50\x2a\xa4\xf3\x95\x6f\x77\x0b\xc7\xd0\x7f\x35\x94\x9f\x2f\xaa\xf3\x2f\xd5\xf9\x85\x9e\xcf\xcb\x37\x2d\xb7\x76\xf5\x84\x6b\xa8\xe1\xa1\x7c\x80\x53\x78\x2d\x3e\x4d\xb5\x64\x7c\x76\x06\xb7\x87\x3a\x10\x76\x84\x11\x3d\xc3\xf5\xd7\xcb\x9f\xb9\x7f\x1a\xd2\x05\xef\x3a\xd4\xb9\x75\x83\x50\x76\x86\xd8\x9a\x76\x9a\xe1\xc0\x07\x36\x6c\x83\x87\xd0\xc0\xf5\xe2\xdb\x6c\x36\x9b\x4f\xc0\x1b\x87\xed\x0e\x36\x9b\xca\xb9\x2a\xc6\x3b\xdd\x34\x5a\xeb\xfb\xec\xf1\x3d\x60\x4c\x2a\x88\xdb\x2e\x2f\x9a\xb6\x86\x40\x79\x1e\xfc\x0d\x1e\xa7\xa1\x69\x22\xf2\x60\xad\x45\x02\x18\x39\x53\xa3\x4e\xa7\x8c\x7f\x69\x28\x6e\x4c\xfb\xe3\xe6\xea\x17\x84\x67\x24\xb2\x6b\x04\x37\x16\x45\xb3\xf5\x2b\x90\x1c\x06\x03\xf5\x5a\x23\x15\xc8\xbb\xfb\xe5\x8e\x71\x02\x48\x14\x48\xc1\x3f\x51\x10\xf2\x96\x3c\xf4\x17\x72\x18\x28\x39\x28\xbd\x08\xe4\x0c\xcb\x77\x41\x2b\x35\x01\x6f\x5b\xb1\xcf\x58\x7f\xbc\x3b\x06\xb6\xf5\x47\xd1\x4e\x46\xb6\x37\x42\xb9\x3c\x30\xa8\x1e\x2e\xb1\x71\xcc\xa4\x50\xd5\x7d\x12\xbf\x0d\x45\x7c\x8f\x33\x81\xc8\x64\xfd\xa3\x5c\x2a\x25\x0a\xdb\x64\xcd\xa7\x3a\x21\x26\x97\x97\x15\x91\x48\x14\x7b\x21\x8a\x13\x0e\x50\x0f\x19\x49\x8e\x6a\x88\x61\xdc\xea\x26\x5b\x42\x5f\x8f\x87\x09\xe3\xc3\xc9\xbf\xeb\x58\xe0\xbd\x4e\xaa\x17\xc5\x18\xf1\x47\xd9\x2a\xb1\x17\xff\x03\x00\x00\xff\xff\x1b\x14\x12\x73\x20\x03\x00\x00")

func time_onlyGoBytes() ([]byte, error) {
	return bindataRead(
		_time_onlyGo,
		"time_only.go",
	)
}

func time_onlyGo() (*asset, error) {
	bytes, err := time_onlyGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "time_only.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"date_only.go": date_onlyGo,
	"datetime.go": datetimeGo,
	"datetime_only.go": datetime_onlyGo,
	"datetime_rfc2616.go": datetime_rfc2616Go,
	"time_only.go": time_onlyGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"date_only.go": &bintree{date_onlyGo, map[string]*bintree{}},
	"datetime.go": &bintree{datetimeGo, map[string]*bintree{}},
	"datetime_only.go": &bintree{datetime_onlyGo, map[string]*bintree{}},
	"datetime_rfc2616.go": &bintree{datetime_rfc2616Go, map[string]*bintree{}},
	"time_only.go": &bintree{time_onlyGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

